name: Precomp NIFs

on:
  push:
    branches:
    - main
    - refactoring
    paths:
    # Just run on main branch if "native" path changed.
    - "native/**"
    # Also run if this file changes.
    #- ".github/workflows/release.yml"
    - ".github/workflows/**"
    tags:
    # Tags will always run.
    - "*"
  pull_request:
    paths:
      # In PRs we only run if this file changes.
      #- ".github/workflows/release.yml"
  workflow_dispatch:


jobs:
  build_release:
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }} | ${{ matrix.job.variant || 'default' }})
    runs-on: ${{ matrix.job.os }}

    permissions:
      contents: write
      id-token: write
      attestations: write

    strategy:
      fail-fast: false
      matrix:
        nif: [ "2.15" ]
        job:
        - { target: aarch64-apple-darwin, os: macos-13 }
        - { target: aarch64-unknown-linux-gnu, os: ubuntu-20.04, use-cross: true }
        # - { target: aarch64-unknown-linux-gnu, os: ubuntu-24.04-arm, use-cross: true }
        #- { target: aarch64-unknown-linux-musl, os: ubuntu-20.04, use-cross: true }
        - { target: x86_64-apple-darwin, os: macos-13 }
        # - { target: x86_64-pc-windows-gnu, os: windows-2022, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }

        - { target: x86_64-pc-windows-gnu, os: windows-2022, variant: "legacy_cpu" }
        - { target: x86_64-pc-windows-msvc, os: windows-2019, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }
        # - { target: x86_64-pc-windows-msvc, os: windows-2019, variant: "legacy_cpu" }
        # - { target: x86_64-unknown-freebsd, os: ubuntu-22.04, use-cross: true, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }
        # - { target: x86_64-unknown-freebsd, os: ubuntu-22.04, use-cross: true, variant: "legacy_cpu" }
        - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04, rustflags: "-C target-feature=+fxsr,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+avx,+fma" }
        - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04, variant: "legacy_cpu" }
        # - { target: x86_64-unknown-linux-musl, os: ubuntu-20.04, use-cross: true }

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Extract crate information
      shell: bash
      run: |
        # Get the project version from mix.exs
        echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

    - name: Maybe add Rust flags for compilation
      shell: bash
      run: |
        echo "RUSTFLAGS=${{ matrix.job.rustflags }}" >> $GITHUB_ENV
      if: ${{ matrix.job.rustflags }}

    - name: Add target
      shell: bash
      run: |
        rustup target add ${{ matrix.job.target }}

    - uses: Swatinem/rust-cache@v2
      with:
        prefix-key: v0-precomp
        shared-key: ${{ matrix.job.target }}-${{ matrix.nif }}
        workspaces: |
          native/btleplug_client

    - name: Build the project
      id: build-crate
      uses: philss/rustler-precompiled-action@v1.1.4
      with:
        project-name: btleplug_client
        project-version: ${{ env.PROJECT_VERSION }}
        target: ${{ matrix.job.target }}
        nif-version: ${{ matrix.nif }}
        use-cross: ${{ matrix.job.use-cross }}
        cross-version: ${{ matrix.job.cross-version || 'from-source' }}
        project-dir: "native/btleplug_client"
        cargo-args: ${{ matrix.job.cargo-args }}
        variant: ${{ matrix.job.variant }}
     - name: Generate Checksums (Linux/macOS)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        # Generate SHA256 checksum
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          SHA256SUM=$(sha256sum ${{ steps.build-crate.outputs.file-path }} | awk '{print $1}')
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          SHA256SUM=$(openssl dgst -sha256 ${{ steps.build-crate.outputs.file-path }} | awk '{print $2}')
        fi
        echo "SHA256SUM=$SHA256SUM" >> $GITHUB_ENV

        # Generate SHA1 checksum
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          SHA1SUM=$(sha1sum ${{ steps.build-crate.outputs.file-path }} | awk '{print $1}')
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          SHA1SUM=$(openssl dgst -sha1 ${{ steps.build-crate.outputs.file-path }} | awk '{print $2}')
        fi
        echo "SHA1SUM=$SHA1SUM" >> $GITHUB_ENV

        # Generate MD5 checksum
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          MD5SUM=$(md5sum ${{ steps.build-crate.outputs.file-path }} | awk '{print $1}')
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          MD5SUM=$(openssl dgst -md5 ${{ steps.build-crate.outputs.file-path }} | awk '{print $2}')
        fi
        echo "MD5SUM=$MD5SUM" >> $GITHUB_ENV

    - name: Generate Checksums (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Generate SHA256 checksum
        $SHA256SUM = Get-FileHash -Algorithm SHA256 ${{ steps.build-crate.outputs.file-path }} | Select-Object -ExpandProperty Hash
        echo "SHA256SUM=$SHA256SUM" >> $GITHUB_ENV

        # Generate SHA1 checksum
        $SHA1SUM = Get-FileHash -Algorithm SHA1 ${{ steps.build-crate.outputs.file-path }} | Select-Object -ExpandProperty Hash
        echo "SHA1SUM=$SHA1SUM" >> $GITHUB_ENV

        # Generate MD5 checksum
        $MD5SUM = Get-FileHash -Algorithm MD5 ${{ steps.build-crate.outputs.file-path }} | Select-Object -ExpandProperty Hash
        echo "MD5SUM=$MD5SUM" >> $GITHUB_ENV

    - name: Artifact attestation
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: ${{ steps.build-crate.outputs.file-path }}
    
    - name: Artifact upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build-crate.outputs.file-name }}
        path: ${{ steps.build-crate.outputs.file-path }}

    - name: Create Release Notes with Checksums
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        RELEASE_BODY="${{ github.event.release.body }}\n\n"
        RELEASE_BODY+="- SHA256 Checksum: ${{ env.SHA256SUM }}\n"
        RELEASE_BODY+="- SHA1 Checksum: ${{ env.SHA1SUM }}\n"
        RELEASE_BODY+="- MD5 Checksum: ${{ env.MD5SUM }}\n"

        echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Create Release Notes with Checksums
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        RELEASE_BODY="${{ github.event.release.body }}\n\n"
        RELEASE_BODY+="- SHA256 Checksum: ${{ env.SHA256SUM }}\n"
        RELEASE_BODY+="- SHA1 Checksum: ${{ env.SHA1SUM }}\n"
        RELEASE_BODY+="- MD5 Checksum: ${{ env.MD5SUM }}\n"

        echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_BODY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Publish archives and packages (Default)
      if: startsWith(github.ref, 'refs/tags/') && runner.os != 'Windows'
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ${{ steps.build-crate.outputs.file-path }}
        body: ${{ env.RELEASE_BODY }}

    - name: Publish archives and packages (Windows)
      if: startsWith(github.ref, 'refs/tags/') && runner.os == 'Windows'
      shell: pwsh
      run: |
        # Windows-specific publishing logic here
        echo "Publishing for Windows..."

        # Example: Set environment variable (as suggested in Stack Overflow link)
        [Environment]::SetEnvironmentVariable("RELEASE_BODY", "${{ env.RELEASE_BODY }}", "Process")

        # Example: Use a different release action or command
        gh release create ${{ github.ref_name }} --title "Release ${{ github.ref_name }}" --body "$Env:RELEASE_BODY" ${{ steps.build-crate.outputs.file-path }}
        echo "Completed Windows Specific Task"
