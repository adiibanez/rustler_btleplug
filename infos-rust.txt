https://www.monkeyvault.net/cryptography-elixir-rust/



// https://stackoverflow.com/questions/58671430/how-to-allow-dead-code-and-unused-imports-for-dev-builds-only
https://stackoverflow.com/questions/19605132/is-it-possible-to-use-global-variables-in-rust


https://doc.rust-lang.org/std/result/
https://docs.rs/btleplug/latest/btleplug/api/struct.ValueNotification.html
https://docs.rs/btleplug/latest/btleplug/api/trait.Peripheral.html

https://blog.logrocket.com/rust-lazy-static-pattern/#advantages-disadvantages-using-lazy-static


https://en.wikipedia.org/wiki/IBeacon

https://github.com/deviceplug/btleplug/blob/73dbd12dcd830e99da63eb74313c9503076c4d40/examples/subscribe_notify_characteristic.rs


https://hexdocs.pm/ex_unit/main/ExUnit.Callbacks.html

use rustler::{Encoder, Env, Term};
use rustler::types::atom;

fn create_term<'a>(env: Env<'a>) -> Term<'a> {
    // Create from atom
    (atom::ok()).encode(env)
    
    // Create from tuple
    (atom::ok(), "some value").encode(env)
    
    // Create from string
    "hello".encode(env)
    
    // Create from number
    42.encode(env)
    
    // Create from Option
    Option::<String>::None.encode(env)
    
    // Create error tuple
    (atom::error(), "error message").encode(env)
}



#[rustler::nif]
fn scan<'a>(env: Env<'a>) -> Term<'a> {
    let mut msg_env = rustler::env::OwnedEnv::new();
    let pid: LocalPid = env.pid();

    msg_env.send_and_clear(&pid, |env| {
        (atoms::candidate_error()).encode(env)
    }).unwrap();

    // Return a proper term instead of Ok(_)
    (atoms::ok()).encode(env)
}



(atoms::ok()).encode(env)  // just :ok
(atoms::ok(), value).encode(env)  // {:ok, value}


(atoms::error(), "error message").encode(env)  // {:error, reason}












Okay, let's dive into handling Result<...> values in Rust and then cover the most important language elements to help you understand the code better.

Handling Result<...> in Rust

The Result<T, E> type in Rust is a fundamental way to represent the outcome of an operation that might fail. It's an enum with two variants:

Ok(T): Represents a successful outcome, containing the value of type T.

Err(E): Represents a failure outcome, containing the error value of type E.

1. Basic Matching

The most explicit way to handle a Result is to use a match expression:

fn divide(x: i32, y: i32) -> Result<i32, String> {
    if y == 0 {
        Err("Cannot divide by zero".to_string())
    } else {
        Ok(x / y)
    }
}

fn main() {
    let result = divide(10, 2);

    match result {
        Ok(value) => println!("Result: {}", value),
        Err(error) => println!("Error: {}", error),
    }
}
Use code with caution.
Rust
In this example:

divide returns a Result<i32, String>.

The match expression checks the result:

If it's Ok(value), it prints the value.

If it's Err(error), it prints the error message.

2. if let for Specific Cases

If you only care about the Ok or Err case, you can use if let:

fn main() {
    let result = divide(10, 0);

    if let Ok(value) = result {
        println!("Result: {}", value);
    } else {
        println!("An error occurred");
    }
}
Use code with caution.
Rust
This is more concise if you only need to handle one of the variants.

3. The ? Operator (Most Common)

The ? operator is the most idiomatic and convenient way to handle Result values in Rust. It allows you to propagate errors up the call stack.

fn divide(x: i32, y: i32) -> Result<i32, String> {
    if y == 0 {
        Err("Cannot divide by zero".to_string())
    } else {
        Ok(x / y)
    }
}

fn process_division(x: i32, y: i32) -> Result<i32, String> {
    let result = divide(x, y)?; // Propagate the error if divide fails
    Ok(result * 2)
}

fn main() -> Result<(), String> {
    let result = process_division(10, 2)?;
    println!("Final result: {}", result);
    Ok(())
}
Use code with caution.
Rust
Key points:

divide(x, y)?: If divide returns Err, the ? operator will immediately return that Err from the process_division function.

main() -> Result<(), String>: The main function can also return a Result, allowing you to propagate errors all the way to the top level.

Error Conversion: Sometimes you need to convert the error type to match the return type of the function. You can use the From trait or the map_err method for this.

4. Combining Results

You can use methods like and_then and or_else to chain operations that return Result values:

fn main() {
    let result1: Result<i32, String> = Ok(10);
    let result2: Result<i32, String> = Err("Something went wrong".to_string());

    let combined = result1.and_then(|value| Ok(value * 2)); // Doubles the value if Ok
    println!("{:?}", combined); // Output: Ok(20)

    let combined2 = result2.or_else(|error| Ok(0)); // Returns 0 if Err
    println!("{:?}", combined2); // Output: Ok(0)
}
Use code with caution.
Rust
5. Common Error Types

std::io::Error: Represents I/O errors.

Box<dyn std::error::Error>: A boxed trait object that can hold any type that implements the std::error::Error trait. This is often used for generic error handling.

Custom Error Types: You can define your own error types using enums or structs.

Summary of Important Rust Language Elements

Ownership and Borrowing:

Ownership: Each value has a single owner. When the owner goes out of scope, the value is dropped.

Borrowing: You can borrow a value using references (& for immutable, &mut for mutable). Borrowing allows you to use a value without taking ownership.

Lifetimes: Lifetimes are annotations that describe the relationships between the lifetimes of references. They're used to ensure that references are always valid.

Data Types:

Primitive Types: i32, f64, bool, char, etc.

Structs: Composite data types that group together related values.

Enums: Types that can have one of several possible values.

Tuples: Fixed-size, ordered collections of values.

Arrays: Fixed-size, contiguous sequences of elements.

Slices: Dynamically sized views into a contiguous sequence of elements.

Vectors: Dynamically sized, growable arrays.

Strings: UTF-8 encoded strings.

Control Flow:

if and else: Conditional execution.

loop: Infinite loop.

while: Loop that executes as long as a condition is true.

for: Loop that iterates over a range or collection.

match: Pattern matching for enums and other data types.

Functions:

Functions are defined using the fn keyword.

They can take arguments and return values.

You can use -> to specify the return type.

Traits:

Traits are like interfaces in other languages.

They define a set of methods that a type must implement.

The impl keyword is used to implement a trait for a type.

Generics:

Generics allow you to write code that works with multiple types.

They're defined using angle brackets (<...>).

Error Handling:

The Result<T, E> type is used to represent the outcome of an operation that might fail.

The ? operator is used to propagate errors.

Modules and Crates:

Modules are used to organize code into logical units.

Crates are compiled units of code.

Macros:

Macros are code that generates other code.

They're defined using the macro_rules! macro.

Asynchronous Programming (Tokio):

async and await keywords are used to write asynchronous code.

tokio::spawn is used to spawn asynchronous tasks.

tokio::time::sleep is used to pause execution for a specified duration.

Example Combining Concepts

use std::error::Error;
use std::fmt;

// Define a custom error type
#[derive(Debug)]
struct MyError {
    message: String,
}

impl fmt::Display for MyError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.message)
    }
}

impl Error for MyError {}

fn process_data(data: i32) -> Result<i32, Box<dyn Error>> {
    if data < 0 {
        return Err(MyError { message: "Data must be non-negative".to_string() }.into());
    }

    Ok(data * 2)
}

fn main() -> Result<(), Box<dyn Error>> {
    let data = 10;
    let result = process_data(data)?; // Propagate the error

    println!("Processed data: {}", result);

    Ok(())
}
Use code with caution.
Rust
This example demonstrates:

A custom error type (MyError).

The Error trait.

The ? operator for error propagation.

By understanding these core concepts and practicing with examples, you'll be well-equipped to write robust and efficient Rust code. Remember to consult the Rust documentation for more detailed information.