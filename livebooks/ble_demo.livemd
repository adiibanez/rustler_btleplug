# Rustler BLE playground

```elixir
Mix.install([
  {:kino, "~> 0.15.2"},
  {:rustler_btleplug, "~> 0.0.10-alpha"},
  {:rustler, "~> 0.36.1", optional: true}
])
```

## Section

```elixir
defmodule RustlerBtleplug.GenserverLiveBook do
  @name :ble_genserver_livebook

  @default_timeout 3000
  @graph_debounce 1000

  use GenServer
  require Logger

  defstruct peripheral: nil,
            central: nil,
            ble_messages: [],
            datatable: nil,
            graph_frame: nil,
            frame: nil,
            graph_timer: nil

  def start_link(frame) do
    GenServer.start_link(__MODULE__, %{frame: frame}, name: @name)
  end

  def init(state) do
    Process.flag(:trap_exit, true)
    # IO.puts("#{__MODULE__} init #{inspect(opts)}")
    {:ok, state, {:continue, :setup}}
  end

  def handle_continue(_, state) do
    graph_frame = Kino.Frame.new()
    datatable = Kino.DataTable.new([], keys: [:type, :uuid, :payload])
    Kino.Frame.render(state.frame, Kino.Layout.grid([graph_frame, datatable]))

    {:noreply,
     %{
       central: nil,
       peripheral: nil,
       ble_messages: [],
       datatable: datatable,
       frame: state.frame,
       graph_frame: graph_frame,
       graph_timer: nil
     }}
  end

  @spec format_payload(any) :: String
  def format_payload(nil), do: ""  # Handle nil values explicitly
  def format_payload(payload) when is_binary(payload), do: payload
  def format_payload(payload) when is_list(payload), do: Enum.join(payload, ", ")
  
  def format_payload(%{} = payload) do
    payload
    |> Enum.map(fn {key, value} ->
      "#{key}: #{format_payload(value)}"  # Recursive call for nested structures
    end)
    |> Enum.join(", ")
  end

  # Fallback for other data types
  def format_payload(payload), do: inspect(payload)

  def update_state_with_message(state, msg) do
    formatted_payload = format_payload(msg.payload)
    formatted_msg = msg |>
      Map.put(:payload, formatted_payload )
    
    #IO.puts(inspect(formatted_msg))

    new_state = %{state | ble_messages: Enum.take([formatted_msg | state.ble_messages], 100)}
    
    Kino.DataTable.update(state.datatable, new_state.ble_messages)
    new_state
  end
  
  def update_graph(_state) do
    Process.send_after(self(), :update_graph, 0)
  end

  def handle_info(:update_graph, state) do
    case state.central do
      nil ->
        IO.puts(":update_graph, no central")
        {:noreply, state}
      _ ->
        case state.graph_timer do
          nil ->
            IO.puts(":update_graph, draw graph")
            graphviz_str = RustlerBtleplug.Native.get_adapter_state_graph(state.central)
            graph = Kino.Mermaid.new(graphviz_str)
            Kino.Frame.render(state.graph_frame, graph)

            timer_ref = Process.send_after(self(), :graph_timer_expired, @graph_debounce)
            {:noreply, %{state | graph_timer: timer_ref}}
          _ ->
            #IO.puts(":update_graph, timer active, ignore")
            {:noreply, state}
        end
    end
  end

  def handle_info(:graph_timer_expired, state) do
    #IO.puts(":graph_timer_expired")
    {:noreply, %{state | graph_timer: nil}}
  end

  def handle_info({:btleplug_scan_started, msg}, state) do
    update_graph(state)
    {:noreply,
     update_state_with_message(state, %{type: "btleplug_scan_started", uuid: "", payload: msg})}
  end

  def handle_info({:btleplug_peripheral_discovered, uuid, props}, state) do
    # %{"address" => address, "address_type" => address, "local_name" => local_name, "manufacturer_data" => manufacturer_data, "rssi" => rssi, "service_data" => service_data, "services" => services, "tx_power_level" => tx_power_level}
    update_graph(state)
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_peripheral_discovered",
       uuid: uuid,
       payload: %{
         local_name: props["local_name"],
         rssi: props["rssi"],
         #services: Map.keys(props["services"]).join(",")
       }
     })}
  end

  def handle_info({:btleplug_peripheral_connected, uuid}, state) do
    # %{"address" => address, "address_type" => address, "local_name" => local_name, "manufacturer_data" => manufacturer_data, "rssi" => rssi, "service_data" => service_data, "services" => services, "tx_power_level" => tx_power_level}
    update_graph(state)
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_peripheral_connected",
       uuid: uuid,
       payload: ""
     })}
  end

  def handle_info({:btleplug_services_advertisement, {uuid, services}}, state) do
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_services_advertisement",
       uuid: uuid,
       payload: services
     })}
  end

  def handle_info({:btleplug_service_data_advertisement, {uuid, service_data}}, state) do
    # %{"0000fe2c-0000-1000-8000-00805f9b34fb" => [0, 64, 2, 1, 65, 84, 17, 118]}
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_service_data_advertisement",
       uuid: uuid,
       payload: service_data
     })}
  end

  def handle_info({:btleplug_peripheral_updated, uuid, props}, state) do
    # %{"0000fe2c-0000-1000-8000-00805f9b34fb" => [0, 64, 2, 1, 65, 84, 17, 118]}
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_peripheral_updated",
       uuid: uuid,
       payload: %{
         local_name: props["local_name"],
         rssi: props["rssi"],
         #services: Map.keys(props["services"]).join(",")
       }
     })}
  end

  def handle_info({:btleplug_manufacturer_data_advertisement, {uuid, _data} = _service_data}, state) do
    # {"4a11a274-c1da-c0cb-7005-ca0e81e8278d", %{301 => [4, 0, 2, 2, 176, 49, 6, 1, 206, 216, 225, 241, 217, 16, 2, 0, 51, 0, 0, 0]}  
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_manufacturer_data_advertisement",
       uuid: "",
       payload: uuid
     })}
  end

  def handle_info({:btleplug_characteristic_value_changed, uuid, value_data}, state) do
    # {:btleplug_characteristic_value_changed, "61d20a90-71a1-11ea-ab12-0800200c9a66", [240, 126, 167, 189]}
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_characteristic_value_changed",
       uuid: uuid,
       payload: value_data
     })}
  end

  def handle_info({:btleplug_peripheral_disconnected, uuid}, state) do
    update_graph(state)
    {:noreply,
     update_state_with_message(state, %{
       type: "btleplug_peripheral_disconnected",
       uuid: uuid,
       payload: ""
     })}
  end

  def handle_info({:btleplug_scan_stopped, msg}, state) do
    update_graph(state)
    {:noreply,
     update_state_with_message(state, %{type: "btleplug_scan_stopped", uuid: "", payload: msg})}
  end

  def create_central() do
    GenServer.call(@name, {:create_central})
  end

  def start_scan(timeout \\ @default_timeout) do
    Logger.debug("client :start_scan")
    GenServer.cast(@name, {:start_scan, timeout})
  end

  def stop_scan() do
    # Logger.debug("client :stop_scan")
    GenServer.cast(@name, {:stop_scan})
  end

  def find_peripheral_by_name(device_name, timeout \\ @default_timeout) do
    # Logger.debug("client :find_peripheral_by_name #{device_name}")
    GenServer.call(@name, {:find_peripheral_by_name, device_name, timeout})
  end

  def connect(timeout \\ @default_timeout) do
    # Logger.debug("client :connect")
    GenServer.call(@name, {:connect, timeout})
  end

  def disconnect(timeout \\ @default_timeout) do
    # Logger.debug("client :connect")
    GenServer.call(@name, {:disconnect, timeout})
  end

  def subscribe(uuid, timeout \\ @default_timeout) do
    # Logger.debug("client :subscribe characteristic uuid: #{uuid}")
    GenServer.call(@name, {:subscribe, uuid, timeout})
  end

  def get_ble_messages() do
    GenServer.call(@name, {:get_ble_messages})
  end

  def handle_cast({:set_central, central_ref}, state) do
    # Logger.debug("handle_cast :set_central #{inspect(central_ref)}")

    new_state =
      state
      |> Map.put(:central, central_ref)

    # Logger.debug("handle_cast :set_central new_state: #{inspect(new_state)}")
    {:noreply, new_state}
  end

  def handle_cast({:start_scan, timeout}, state) do
    Logger.debug("handle_cast :start_scan #{inspect(state)}")

    case state.central do
      nil ->
        Logger.debug("No central reference to start scan.")
        {:noreply, state}

      central_ref ->
        # Call NIF to stop the scan using the central reference
        case RustlerBtleplug.Native.start_scan(central_ref, timeout) do
          {:error, reason} ->
            Logger.debug("Failed to start scan: #{reason}")
            {:noreply, state}

          _central_ref ->
            Logger.debug("Scan Started.")
            Process.sleep(1000)
            {:noreply, state}
        end
    end
  end

  def handle_cast({:stop_scan}, state) do
    # Logger.debug("handle_cast :stop_scan #{inspect(state)}")

    case state.central do
      nil ->
        # Logger.debug("No central reference to stop scan.")
        {:noreply, state}

      central_ref ->
        # Call NIF to stop the scan using the central reference
        case RustlerBtleplug.Native.stop_scan(central_ref) do
          {:error, _reason} ->
            # Logger.debug("Failed to stop scan: #{reason}")
            {:noreply, state}

          _central_ref ->
            # Logger.debug("Scan Stopped.")
            {:noreply, state}
        end
    end
  end

  def handle_call({:create_central}, _from, state) do
    case RustlerBtleplug.Native.create_central() do
      {:error, reason} ->
        {:error, reason}

      central_ref ->
        GenServer.cast(@name, {:set_central, central_ref})
        # Logger.debug("Central Created and Reference Stored!")
        {:reply, {:ok, central_ref}, state}
    end
  end

  def handle_call({:find_peripheral_by_name, device_name, timeout}, _from, state) do
    case state.central do
      nil ->
        # Logger.debug("No central reference to find_peripheral_by_name.")
        {:noreply, state}

      central_ref ->
        case RustlerBtleplug.Native.find_peripheral_by_name(central_ref, device_name, timeout) do
          {:error, _reason} ->
            # Logger.debug("Failed to find #{device_name}: #{reason}")
            {:noreply, state}

          peripheral_ref ->
            # Logger.debug("Peripheral #{device_name} found #{inspect(peripheral_ref)}")
            {:reply, {:ok, peripheral_ref}, %{state | peripheral: peripheral_ref}}
        end
    end
  end

  def handle_call({:connect, timeout}, _from, state) do
    case state.peripheral do
      nil ->
        # Logger.debug("No peripheral reference to connect.")
        {:noreply, state}

      peripheral_ref ->
        case RustlerBtleplug.Native.connect(peripheral_ref, timeout) do
          {:error, _reason} ->
            # Logger.debug("Failed to connect to #{inspect(peripheral_ref)}: #{reason}")
            {:noreply, state}

          peripheral_ref ->
            # Logger.debug("Connecting to #{inspect(peripheral_ref)}")
            {:reply, {:ok, peripheral_ref}, %{state | peripheral: peripheral_ref}}
        end
    end
  end

  def handle_call({:disconnect, timeout}, _from, state) do
    case state.peripheral do
      nil ->
        # Logger.debug("No peripheral reference to connect.")
        {:noreply, state}

      peripheral_ref ->
        case RustlerBtleplug.Native.disconnect(peripheral_ref, timeout) do
          {:error, _reason} ->
            # Logger.debug("Failed to connect to #{inspect(peripheral_ref)}: #{reason}")
            {:noreply, state}

          _peripheral_ref ->
            # Logger.debug("Connecting to #{inspect(peripheral_ref)}")
            {:reply, :ok, %{state | peripheral: nil}}
        end
    end
  end

  def handle_call({:subscribe, uuid, timeout}, _from, state) do
    case state.peripheral do
      nil ->
        # Logger.debug("No peripheral reference to subscribe to.")
        {:noreply, state}

      peripheral_ref ->
        case RustlerBtleplug.Native.subscribe(peripheral_ref, uuid, timeout) do
          {:error, _reason} ->
            # Logger.debug("Failed to subscribe to #{uuid}: #{reason}")
            {:noreply, state}

          peripheral_ref ->
            # Logger.debug("Subscribing to #{uuid} #{inspect(peripheral_ref)}")
            {:reply, {:ok, peripheral_ref}, %{state | peripheral: peripheral_ref}}
        end
    end
  end

  def handle_call({:get_ble_messages}, _from, state) do
    # Logger.debug("handle_call :get_ble_messages")
    {:reply, state.ble_messages, state}
  end
end
```

```elixir
default_timeout = 3000

frame = Kino.Frame.new()
Kino.start_child!({RustlerBtleplug.GenserverLiveBook, frame})
{:ok, central_ref} = RustlerBtleplug.GenserverLiveBook.create_central()
IO.puts("Is central_ref a reference: #{inspect(is_reference(central_ref))}")
RustlerBtleplug.GenserverLiveBook.start_scan()


Task.start(fn ->
  Process.sleep(1000)
  RustlerBtleplug.GenserverLiveBook.find_peripheral_by_name("Pressure")
  RustlerBtleplug.GenserverLiveBook.connect()
  RustlerBtleplug.GenserverLiveBook.subscribe("61d20a90-71a1-11ea-ab12-0800200c9a66")
end)

Task.start(fn ->
  Process.sleep(10000)
  RustlerBtleplug.GenserverLiveBook.disconnect()
end)

frame
```
