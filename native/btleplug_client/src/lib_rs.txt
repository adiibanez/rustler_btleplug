#![allow(unused_imports)]
#![allow(dead_code)]

extern crate btleplug;

mod atoms;
mod task;
mod utils;

use btleplug::api::{
    bleuuid::BleUuid, Central, CentralEvent, Characteristic, CharPropFlags, Manager as _, Peripheral, ScanFilter,
    ValueNotification,
};
use btleplug::platform::{Adapter, Manager, PeripheralId};
use futures::stream::StreamExt;
use rustler::env::OwnedEnv;
use rustler::types::LocalPid;
use rustler::{Atom, Encoder, Env, Error, Term, ResourceArc, NifStruct, NifUnitEnum};
use std::collections::HashMap;
use std::sync::Mutex;
use uuid::Uuid;

// Define structs to represent Bluetooth data
#[derive(Debug, Clone, NifStruct)]
#[rustler(encode, decode)]
#[module = "RustlerBtleplug.PeripheralData"]
struct PeripheralData {
    id: String, // Changed to String
    name: Option<String>,
    services: Vec<ServiceData>,
}

#[derive(Debug, Clone, NifStruct)]
#[rustler(encode, decode)]
#[module = "RustlerBtleplug.ServiceData"]
struct ServiceData {
    uuid: String,
    characteristics: Vec<CharacteristicData>,
}

#[derive(Debug, Clone, NifStruct)]
#[rustler(encode, decode)]
#[module = "RustlerBtleplug.CharacteristicData"]
struct CharacteristicData {
    uuid: String,
    properties: u32, // Changed to u32
}

// Define the global state
pub struct GlobalState {
    peripherals: Mutex<HashMap<String, PeripheralData>>, // Changed to String
}

impl GlobalState {
    fn new() -> Self {
        GlobalState {
            peripherals: Mutex::new(HashMap::new()),
        }
    }
}

// Use lazy_static to initialize the global state
lazy_static::lazy_static! {
    static ref GLOBAL_STATE: GlobalState = GlobalState::new();
}

fn send_message<'a>(msg_env: &mut OwnedEnv, pid: &LocalPid, payload: (Atom, String)) {
    msg_env
        .send_and_clear(pid, |env| payload.encode(env))
        .unwrap();
}

#[rustler::nif]
fn scan<'a>(env: Env<'a>) -> Result<Term<'a>, Error> {
    let pid = env.pid();

    task::spawn(async move {
        println!("Test btleplug scan");

        let mut msg_env = rustler::env::OwnedEnv::new();

        let manager_result = Manager::new().await;

        match manager_result {
            Ok(manager) => {
                let central_result = get_central(&manager).await;

                match central_result {
                    Ok(central) => {
                        println!("Got central");

                        send_message(
                            &mut msg_env,
                            &pid,
                            (atoms::btleplug_got_central(), "additional_data".to_string()),
                        );

                        let mut events = central.events().await;

                        let _ = central.start_scan(ScanFilter::default()).await;

                        while let Some(event) = events.as_mut().expect("REASON").next().await {
                            match event {
                                CentralEvent::DeviceDiscovered(id) => {
                                    let peripheral_result = central.peripheral(&id).await;

                                    match peripheral_result {
                                        Ok(peripheral) => {
                                            let peripheral_is_connected: bool =
                                                peripheral.is_connected().await.expect("REASON");

                                            let properties =
                                                peripheral.properties().await.expect("REASON");

                                            let name = properties
                                                .and_then(|p| p.local_name);

                                            let predefined_prefixes =
                                                vec!["PressureSensor", "Arduino", "HumiditySensor"];
                                            let mut should_connect = false;
                                            if let Some(ref name_str) = name {
                                                for prefix in predefined_prefixes {
                                                    if name_str.contains(prefix) {
                                                        println!("Peripheral Prefix {} found: {:?}, going to connect", prefix, name_str);
                                                        should_connect = true;
                                                        break;
                                                    }
                                                }
                                            }

                                            if should_connect {
                                                if !peripheral_is_connected {
                                                    // Connect if we aren't already connected.
                                                    if let Err(err) = peripheral.connect().await
                                                    {
                                                        eprintln!("Error connecting to peripheral, skipping: {}", err);
                                                        continue;
                                                    }
                                                }
                                                let peripheral_is_connected =
                                                    peripheral.is_connected().await;
                                                println!(
                                                    "Now connected ({:?}) to peripheral {:?}.",
                                                    peripheral_is_connected, &name
                                                );

                                                peripheral.discover_services().await.expect("Error discovering services");

                                                let services: Vec<ServiceData> = peripheral.services().into_iter().map(|service| {
                                                    let characteristics: Vec<CharacteristicData> = service.characteristics.into_iter().map(|characteristic| {
                                                        CharacteristicData {
                                                            uuid: characteristic.uuid.to_string(), // Convert Uuid to String
                                                            properties: characteristic.properties.bits() as u32, // Convert CharPropFlags to u32
                                                        }
                                                    }).collect();
                                                    ServiceData {
                                                        uuid: service.uuid.to_string(), // Convert Uuid to String
                                                        characteristics: characteristics,
                                                    }
                                                }).collect();

                                                let peripheral_data = PeripheralData {
                                                    id: id.to_string(), // Use the converted Uuid
                                                    name: name.clone(),
                                                    services: services,
                                                };

                                                let mut peripherals = GLOBAL_STATE.peripherals.lock().unwrap();
                                                peripherals.insert(id.to_string(), peripheral_data);
                                            }

                                            send_message(
                                                &mut msg_env,
                                                &pid,
                                                (
                                                    atoms::btleplug_device_discovered(),
                                                    format!(
                                                        "PeripheralDiscovered: {:?}, {:?} {:?}",
                                                        id, name, peripheral_is_connected
                                                    ),
                                                ),
                                            );
                                        }
                                        Err(e) => {
                                            println!("PeripheralDiscovery Error {:?}", e);
                                            send_message(
                                                &mut msg_env,
                                                &pid,
                                                (
                                                    atoms::btleplug_device_discovery_error(),
                                                    format!(
                                                        "PeripheralDiscovered: Error {:?}, {:?}",
                                                        id, e
                                                    ),
                                                ),
                                            );
                                        }
                                    }
                                }
                                CentralEvent::StateUpdate(state) => {
                                    println!("AdapterStatusUpdate {:?}", state);

                                    send_message(
                                        &mut msg_env,
                                        &pid,
                                        (
                                            atoms::btleplug_adapter_status_update(),
                                            format!("AdapterStatusUpdate: State {:?}", state),
                                        ),
                                    );
                                }
                                CentralEvent::DeviceConnected(id) => {
                                    println!("DeviceConnected: {:?}", id);
                                    send_message(
                                        &mut msg_env,
                                        &pid,
                                        (
                                            atoms::btleplug_device_connected(),
                                            format!("DeviceConnected: ID {:?}", id),
                                        ),
                                    );
                                }
                                CentralEvent::DeviceDisconnected(id) => {
                                    println!("DeviceDisconnected: {:?}", id);
                                    send_message(
                                        &mut msg_env,
                                        &pid,
                                        (
                                            atoms::btleplug_device_disconnected(),
                                            format!("DeviceDisconnected: ID {:?}", id),
                                        ),
                                    );
                                }
                                CentralEvent::ManufacturerDataAdvertisement {
                                    id,
                                    manufacturer_data,
                                } => {
                                    println!(
                                        "ManufacturerDataAdvertisement: {:?}, {:?}",
                                        id, manufacturer_data
                                    );
                                    send_message(
                                        &mut msg_env,
                                        &pid,
                                        (
                                            atoms::btleplug_manufacturer_data_advertisement(),
                                            format!("ManufacturerDataAdvertisement: ID {:?}, DATA: {:?}", id, manufacturer_data),
                                        ),
                                    );
                                }
                                CentralEvent::ServiceDataAdvertisement { id, service_data } => {
                                    println!(
                                        "ServiceDataAdvertisement: {:?}, {:?}",
                                        id, service_data
                                    );

                                    send_message(
                                        &mut msg_env,
                                        &pid,
                                        (
                                            atoms::btleplug_service_data_advertisement(),
                                            format!(
                                                "ServiceDataAdvertisement: ID {:?}, DATA: {:?}",
                                                id, service_data
                                            ),
                                        ),
                                    );
                                }
                                CentralEvent::ServicesAdvertisement { id, services } => {
                                    let services: Vec<String> =
                                        services.into_iter().map(|s| s.to_short_string()).collect();
                                    println!("ServicesAdvertisement: {:?}, {:?}", id, services);

                                    send_message(
                                        &mut msg_env,
                                        &pid,
                                        (
                                            atoms::btleplug_services_advertisement(),
                                            format!(
                                                "ServicesAdvertisement: ID {:?}, SERVICES: {:?}",
                                                id, services
                                            ),
                                        ),
                                    );
                                }
                                _ => {}
                            }
                        }
                    }
                    Err(e) => {
                        send_message(
                            &mut msg_env,
                            &pid,
                            (atoms::btleplug_error(), "".to_string()),
                        );
                        println!("Failed to get central: {:?}", e);
                    }
                }
            }
            Err(e) => {
                println!("Failed to create manager: {:?}", e);
            }
        }
    });

    Ok((atoms::ok(), pid).encode(env))
}

async fn get_central(manager: &Manager) -> Result<Adapter, Atom> {
    let adapters_result = manager.adapters().await;
    match adapters_result {
        Ok(adapters) => {
            if let Some(adapter) = adapters.into_iter().next() {
                Ok(adapter)
            } else {
                Err(atoms::btleplug_no_adapters_found())
            }
        }
        Err(_e) => Err(atoms::btleplug_error()),
    }
}

// Function to retrieve a peripheral by UUID
#[rustler::nif]
fn get_peripheral_by_uuid<'a>(env: Env<'a>, uuid_str: String) -> Result<Term<'a>, Error> {
    let peripherals = GLOBAL_STATE.peripherals.lock().unwrap();
    match peripherals.get(&uuid_str) {
        Some(peripheral_data) => {
            // Encode the PeripheralData struct for Elixir
            Ok((atoms::ok(), peripheral_data.clone()).encode(env))
        }
        None => Err(Error::Atom("peripheral_not_found")),
    }
}

#[rustler::nif]
fn get_service_by_uuid<'a>(env: Env<'a>, peripheral_uuid_str: String, service_uuid_str: String) -> Result<Term<'a>, Error> {
    let peripherals = GLOBAL_STATE.peripherals.lock().unwrap();
    match peripherals.get(&peripheral_uuid_str) {
        Some(peripheral_data) => {
            match peripheral_data.services.iter().find(|s| s.uuid == service_uuid_str) {
                Some(service_data) => {
                    Ok((atoms::ok(), service_data.clone()).encode(env))
                }
                None => Err(Error::Atom("service_not_found")),
            }
        }
        None => Err(Error::Atom("peripheral_not_found")),
    }
}

#[rustler::nif]
fn get_characteristic_by_uuid<'a>(env: Env<'a>, peripheral_uuid_str: String, service_uuid_str: String, characteristic_uuid_str: String) -> Result<Term<'a>, Error> {
    let peripherals = GLOBAL_STATE.peripherals.lock().unwrap();
    match peripherals.get(&peripheral_uuid_str) {
        Some(peripheral_data) => {
            match peripheral_data.services.iter().find(|s| s.uuid == service_uuid_str) {
                Some(service_data) => {
                    match service_data.characteristics.iter().find(|c| c.uuid == characteristic_uuid_str) {
                        Some(characteristic_data) => {
                            Ok((atoms::ok(), characteristic_data.clone()).encode(env))
                        }
                        None => Err(Error::Atom("characteristic_not_found")),
                    }
                }
                None => Err(Error::Atom("service_not_found")),
            }
        }
        None => Err(Error::Atom("peripheral_not_found")),
    }
}

rustler::init!("Elixir.RustlerBtleplug.Native");